// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: g_proto_e3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_g_5fproto_5fe3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_g_5fproto_5fe3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_g_5fproto_5fe3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_g_5fproto_5fe3_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_g_5fproto_5fe3_2eproto;
namespace citiesData {
class cityData;
class cityDataDefaultTypeInternal;
extern cityDataDefaultTypeInternal _cityData_default_instance_;
class stateData;
class stateDataDefaultTypeInternal;
extern stateDataDefaultTypeInternal _stateData_default_instance_;
}  // namespace citiesData
PROTOBUF_NAMESPACE_OPEN
template<> ::citiesData::cityData* Arena::CreateMaybeMessage<::citiesData::cityData>(Arena*);
template<> ::citiesData::stateData* Arena::CreateMaybeMessage<::citiesData::stateData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace citiesData {

// ===================================================================

class cityData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:citiesData.cityData) */ {
 public:
  cityData();
  virtual ~cityData();

  cityData(const cityData& from);
  cityData(cityData&& from) noexcept
    : cityData() {
    *this = ::std::move(from);
  }

  inline cityData& operator=(const cityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline cityData& operator=(cityData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cityData& default_instance();

  enum ExampleOneofCase {
    kCityname = 1,
    kPincode = 2,
    kAddress = 3,
    EXAMPLE_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cityData* internal_default_instance() {
    return reinterpret_cast<const cityData*>(
               &_cityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(cityData& a, cityData& b) {
    a.Swap(&b);
  }
  inline void Swap(cityData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cityData* New() const final {
    return CreateMaybeMessage<cityData>(nullptr);
  }

  cityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cityData& from);
  void MergeFrom(const cityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "citiesData.cityData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_g_5fproto_5fe3_2eproto);
    return ::descriptor_table_g_5fproto_5fe3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateNameFieldNumber = 5,
    kCitynameFieldNumber = 1,
    kPincodeFieldNumber = 2,
    kAddressFieldNumber = 3,
  };
  // string stateName = 5;
  void clear_statename();
  const std::string& statename() const;
  void set_statename(const std::string& value);
  void set_statename(std::string&& value);
  void set_statename(const char* value);
  void set_statename(const char* value, size_t size);
  std::string* mutable_statename();
  std::string* release_statename();
  void set_allocated_statename(std::string* statename);
  private:
  const std::string& _internal_statename() const;
  void _internal_set_statename(const std::string& value);
  std::string* _internal_mutable_statename();
  public:

  // string cityname = 1;
  private:
  bool _internal_has_cityname() const;
  public:
  void clear_cityname();
  const std::string& cityname() const;
  void set_cityname(const std::string& value);
  void set_cityname(std::string&& value);
  void set_cityname(const char* value);
  void set_cityname(const char* value, size_t size);
  std::string* mutable_cityname();
  std::string* release_cityname();
  void set_allocated_cityname(std::string* cityname);
  private:
  const std::string& _internal_cityname() const;
  void _internal_set_cityname(const std::string& value);
  std::string* _internal_mutable_cityname();
  public:

  // int32 pincode = 2;
  private:
  bool _internal_has_pincode() const;
  public:
  void clear_pincode();
  ::PROTOBUF_NAMESPACE_ID::int32 pincode() const;
  void set_pincode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pincode() const;
  void _internal_set_pincode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string address = 3;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  void clear_example_oneof();
  ExampleOneofCase example_oneof_case() const;
  // @@protoc_insertion_point(class_scope:citiesData.cityData)
 private:
  class _Internal;
  void set_has_cityname();
  void set_has_pincode();
  void set_has_address();

  inline bool has_example_oneof() const;
  inline void clear_has_example_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statename_;
  union ExampleOneofUnion {
    ExampleOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cityname_;
    ::PROTOBUF_NAMESPACE_ID::int32 pincode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  } example_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_g_5fproto_5fe3_2eproto;
};
// -------------------------------------------------------------------

class stateData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:citiesData.stateData) */ {
 public:
  stateData();
  virtual ~stateData();

  stateData(const stateData& from);
  stateData(stateData&& from) noexcept
    : stateData() {
    *this = ::std::move(from);
  }

  inline stateData& operator=(const stateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline stateData& operator=(stateData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stateData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stateData* internal_default_instance() {
    return reinterpret_cast<const stateData*>(
               &_stateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(stateData& a, stateData& b) {
    a.Swap(&b);
  }
  inline void Swap(stateData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stateData* New() const final {
    return CreateMaybeMessage<stateData>(nullptr);
  }

  stateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stateData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stateData& from);
  void MergeFrom(const stateData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stateData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "citiesData.stateData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_g_5fproto_5fe3_2eproto);
    return ::descriptor_table_g_5fproto_5fe3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitiesFieldNumber = 1,
  };
  // repeated .citiesData.cityData cities = 1;
  int cities_size() const;
  private:
  int _internal_cities_size() const;
  public:
  void clear_cities();
  ::citiesData::cityData* mutable_cities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::citiesData::cityData >*
      mutable_cities();
  private:
  const ::citiesData::cityData& _internal_cities(int index) const;
  ::citiesData::cityData* _internal_add_cities();
  public:
  const ::citiesData::cityData& cities(int index) const;
  ::citiesData::cityData* add_cities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::citiesData::cityData >&
      cities() const;

  // @@protoc_insertion_point(class_scope:citiesData.stateData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::citiesData::cityData > cities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_g_5fproto_5fe3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// cityData

// string stateName = 5;
inline void cityData::clear_statename() {
  statename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& cityData::statename() const {
  // @@protoc_insertion_point(field_get:citiesData.cityData.stateName)
  return _internal_statename();
}
inline void cityData::set_statename(const std::string& value) {
  _internal_set_statename(value);
  // @@protoc_insertion_point(field_set:citiesData.cityData.stateName)
}
inline std::string* cityData::mutable_statename() {
  // @@protoc_insertion_point(field_mutable:citiesData.cityData.stateName)
  return _internal_mutable_statename();
}
inline const std::string& cityData::_internal_statename() const {
  return statename_.GetNoArena();
}
inline void cityData::_internal_set_statename(const std::string& value) {
  
  statename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void cityData::set_statename(std::string&& value) {
  
  statename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:citiesData.cityData.stateName)
}
inline void cityData::set_statename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:citiesData.cityData.stateName)
}
inline void cityData::set_statename(const char* value, size_t size) {
  
  statename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:citiesData.cityData.stateName)
}
inline std::string* cityData::_internal_mutable_statename() {
  
  return statename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* cityData::release_statename() {
  // @@protoc_insertion_point(field_release:citiesData.cityData.stateName)
  
  return statename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void cityData::set_allocated_statename(std::string* statename) {
  if (statename != nullptr) {
    
  } else {
    
  }
  statename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statename);
  // @@protoc_insertion_point(field_set_allocated:citiesData.cityData.stateName)
}

// string cityname = 1;
inline bool cityData::_internal_has_cityname() const {
  return example_oneof_case() == kCityname;
}
inline void cityData::set_has_cityname() {
  _oneof_case_[0] = kCityname;
}
inline void cityData::clear_cityname() {
  if (_internal_has_cityname()) {
    example_oneof_.cityname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_example_oneof();
  }
}
inline const std::string& cityData::cityname() const {
  // @@protoc_insertion_point(field_get:citiesData.cityData.cityname)
  return _internal_cityname();
}
inline void cityData::set_cityname(const std::string& value) {
  _internal_set_cityname(value);
  // @@protoc_insertion_point(field_set:citiesData.cityData.cityname)
}
inline std::string* cityData::mutable_cityname() {
  // @@protoc_insertion_point(field_mutable:citiesData.cityData.cityname)
  return _internal_mutable_cityname();
}
inline const std::string& cityData::_internal_cityname() const {
  if (_internal_has_cityname()) {
    return example_oneof_.cityname_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void cityData::_internal_set_cityname(const std::string& value) {
  if (!_internal_has_cityname()) {
    clear_example_oneof();
    set_has_cityname();
    example_oneof_.cityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.cityname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void cityData::set_cityname(std::string&& value) {
  // @@protoc_insertion_point(field_set:citiesData.cityData.cityname)
  if (!_internal_has_cityname()) {
    clear_example_oneof();
    set_has_cityname();
    example_oneof_.cityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.cityname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:citiesData.cityData.cityname)
}
inline void cityData::set_cityname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_cityname()) {
    clear_example_oneof();
    set_has_cityname();
    example_oneof_.cityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.cityname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:citiesData.cityData.cityname)
}
inline void cityData::set_cityname(const char* value, size_t size) {
  if (!_internal_has_cityname()) {
    clear_example_oneof();
    set_has_cityname();
    example_oneof_.cityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.cityname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:citiesData.cityData.cityname)
}
inline std::string* cityData::_internal_mutable_cityname() {
  if (!_internal_has_cityname()) {
    clear_example_oneof();
    set_has_cityname();
    example_oneof_.cityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return example_oneof_.cityname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* cityData::release_cityname() {
  // @@protoc_insertion_point(field_release:citiesData.cityData.cityname)
  if (_internal_has_cityname()) {
    clear_has_example_oneof();
    return example_oneof_.cityname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void cityData::set_allocated_cityname(std::string* cityname) {
  if (has_example_oneof()) {
    clear_example_oneof();
  }
  if (cityname != nullptr) {
    set_has_cityname();
    example_oneof_.cityname_.UnsafeSetDefault(cityname);
  }
  // @@protoc_insertion_point(field_set_allocated:citiesData.cityData.cityname)
}

// int32 pincode = 2;
inline bool cityData::_internal_has_pincode() const {
  return example_oneof_case() == kPincode;
}
inline void cityData::set_has_pincode() {
  _oneof_case_[0] = kPincode;
}
inline void cityData::clear_pincode() {
  if (_internal_has_pincode()) {
    example_oneof_.pincode_ = 0;
    clear_has_example_oneof();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cityData::_internal_pincode() const {
  if (_internal_has_pincode()) {
    return example_oneof_.pincode_;
  }
  return 0;
}
inline void cityData::_internal_set_pincode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_pincode()) {
    clear_example_oneof();
    set_has_pincode();
  }
  example_oneof_.pincode_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cityData::pincode() const {
  // @@protoc_insertion_point(field_get:citiesData.cityData.pincode)
  return _internal_pincode();
}
inline void cityData::set_pincode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pincode(value);
  // @@protoc_insertion_point(field_set:citiesData.cityData.pincode)
}

// string address = 3;
inline bool cityData::_internal_has_address() const {
  return example_oneof_case() == kAddress;
}
inline void cityData::set_has_address() {
  _oneof_case_[0] = kAddress;
}
inline void cityData::clear_address() {
  if (_internal_has_address()) {
    example_oneof_.address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_example_oneof();
  }
}
inline const std::string& cityData::address() const {
  // @@protoc_insertion_point(field_get:citiesData.cityData.address)
  return _internal_address();
}
inline void cityData::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:citiesData.cityData.address)
}
inline std::string* cityData::mutable_address() {
  // @@protoc_insertion_point(field_mutable:citiesData.cityData.address)
  return _internal_mutable_address();
}
inline const std::string& cityData::_internal_address() const {
  if (_internal_has_address()) {
    return example_oneof_.address_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void cityData::_internal_set_address(const std::string& value) {
  if (!_internal_has_address()) {
    clear_example_oneof();
    set_has_address();
    example_oneof_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void cityData::set_address(std::string&& value) {
  // @@protoc_insertion_point(field_set:citiesData.cityData.address)
  if (!_internal_has_address()) {
    clear_example_oneof();
    set_has_address();
    example_oneof_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:citiesData.cityData.address)
}
inline void cityData::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_address()) {
    clear_example_oneof();
    set_has_address();
    example_oneof_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:citiesData.cityData.address)
}
inline void cityData::set_address(const char* value, size_t size) {
  if (!_internal_has_address()) {
    clear_example_oneof();
    set_has_address();
    example_oneof_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  example_oneof_.address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:citiesData.cityData.address)
}
inline std::string* cityData::_internal_mutable_address() {
  if (!_internal_has_address()) {
    clear_example_oneof();
    set_has_address();
    example_oneof_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return example_oneof_.address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* cityData::release_address() {
  // @@protoc_insertion_point(field_release:citiesData.cityData.address)
  if (_internal_has_address()) {
    clear_has_example_oneof();
    return example_oneof_.address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void cityData::set_allocated_address(std::string* address) {
  if (has_example_oneof()) {
    clear_example_oneof();
  }
  if (address != nullptr) {
    set_has_address();
    example_oneof_.address_.UnsafeSetDefault(address);
  }
  // @@protoc_insertion_point(field_set_allocated:citiesData.cityData.address)
}

inline bool cityData::has_example_oneof() const {
  return example_oneof_case() != EXAMPLE_ONEOF_NOT_SET;
}
inline void cityData::clear_has_example_oneof() {
  _oneof_case_[0] = EXAMPLE_ONEOF_NOT_SET;
}
inline cityData::ExampleOneofCase cityData::example_oneof_case() const {
  return cityData::ExampleOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// stateData

// repeated .citiesData.cityData cities = 1;
inline int stateData::_internal_cities_size() const {
  return cities_.size();
}
inline int stateData::cities_size() const {
  return _internal_cities_size();
}
inline void stateData::clear_cities() {
  cities_.Clear();
}
inline ::citiesData::cityData* stateData::mutable_cities(int index) {
  // @@protoc_insertion_point(field_mutable:citiesData.stateData.cities)
  return cities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::citiesData::cityData >*
stateData::mutable_cities() {
  // @@protoc_insertion_point(field_mutable_list:citiesData.stateData.cities)
  return &cities_;
}
inline const ::citiesData::cityData& stateData::_internal_cities(int index) const {
  return cities_.Get(index);
}
inline const ::citiesData::cityData& stateData::cities(int index) const {
  // @@protoc_insertion_point(field_get:citiesData.stateData.cities)
  return _internal_cities(index);
}
inline ::citiesData::cityData* stateData::_internal_add_cities() {
  return cities_.Add();
}
inline ::citiesData::cityData* stateData::add_cities() {
  // @@protoc_insertion_point(field_add:citiesData.stateData.cities)
  return _internal_add_cities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::citiesData::cityData >&
stateData::cities() const {
  // @@protoc_insertion_point(field_list:citiesData.stateData.cities)
  return cities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace citiesData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_g_5fproto_5fe3_2eproto
